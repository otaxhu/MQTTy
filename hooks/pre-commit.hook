#!/bin/sh

# Copyright (c) 2025 Oscar Pernia
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Original source: https://gitlab.gnome.org/GNOME/fractal/blob/master/hooks/pre-commit.hook

install_rustfmt() {
    if ! which rustup >/dev/null 2>&1; then
        curl https://sh.rustup.rs -sSf  | sh -s -- -y
        export PATH=$PATH:$HOME/.cargo/bin
        if ! which rustup >/dev/null 2>&1; then
            echo "Failed to install rustup. Performing the commit without style checking."
            exit 0
        fi
    fi

    if ! rustup component list|grep rustfmt >/dev/null 2>&1; then
        echo "Installing rustfmt…"
        rustup component add rustfmt
    fi
}

if ! which cargo >/dev/null 2>&1 || ! cargo fmt --help >/dev/null 2>&1; then
    echo "Unable to check the project’s code style, because rustfmt could not be run."

    if [ ! -t 1 ]; then
        # No input is possible
        echo "Performing commit."
        exit 0
    fi

    echo ""
    echo "y: Install rustfmt via rustup"
    echo "n: Don't install rustfmt and perform the commit"
    echo "Q: Don't install rustfmt and abort the commit"

    echo ""
    while true
    do
        printf "%s" "Install rustfmt via rustup? [y/n/Q]: "; read yn < /dev/tty
        case $yn in
            [Yy]* ) install_rustfmt; break;;
            [Nn]* ) echo "Performing commit."; exit 0;;
            [Qq]* | "" ) echo "Aborting commit."; exit 1 >/dev/null 2>&1;;
            * ) echo "Invalid input";;
        esac
    done

fi

echo "--Checking Rust style--"
cargo fmt --all -- --check
if test $? != 0; then
    echo "--Checking Rust style fail--"
    echo "Please fix the above issues, either manually or by running: cargo fmt --all"

    exit 1
else
    echo "--Checking style pass--"
fi

echo "--Checking Blueprint style--"

BLUEPRINT_CMD="blueprint-compiler"

which $BLUEPRINT_CMD >/dev/null 2>&1

if test $? != 0; then
    BLUEPRINT_CMD=./subprojects/blueprint-compiler/blueprint-compiler.py
    echo "blueprint-compiler not found, falling back to $BLUEPRINT_CMD"
fi

$BLUEPRINT_CMD format -s 2 data/gtk/*.blp data/ui/*.blp data/ui/pages/*.blp data/ui/publish_view/*.blp

if test $? != 0; then
    echo "--Checking Blueprint style fail--"
    echo "Please fix the above issues, you will have to do it manually"

    exit 1
fi
